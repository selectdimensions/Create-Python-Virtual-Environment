# Name of the GitHub Actions workflow
name: Python Virtual Environment Creator Tests

# Define when this workflow should be triggered
on:
  # Trigger on push events to main and develop branches
  push:
    branches: [ main, develop ]
  # Trigger on pull requests to main and develop branches  
  pull_request:
    branches: [ main, develop ]

# Define the jobs to run as part of this workflow
jobs:
  # Job for running tests across different environments
  test:
    # Dynamic name showing OS and Python version being tested
    name: Test on ${{ matrix.os }} / Python ${{ matrix.python-version }}
    # OS to run the job on, pulled from matrix strategy
    runs-on: ${{ matrix.os }}
    strategy:
      # Continue running other matrix combinations even if one fails
      fail-fast: false
      # Define test matrix - will run tests on all combinations of these
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11']

    steps:
    # Check out the repository code
    - uses: actions/checkout@v3

    # Set up Python environment with specified version
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        architecture: x64

    # Install required Python packages for testing
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov mypy types-setuptools

    # Run static type checking with mypy in strict mode
    - name: Run type checking
      run: |
        mypy venv_creator.py test_venv_creator.py --strict

    # Run tests with pytest and generate coverage report
    - name: Run tests with coverage
      run: |
        pytest test_venv_creator.py -v --cov=. --cov-report=xml

    # Upload test coverage data to Codecov
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-${{ matrix.os }}-py${{ matrix.python-version }}
        fail_ci_if_error: false

  # Job for code linting checks
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    # Check out repository code
    - uses: actions/checkout@v3

    # Set up Python 3.11 environment for linting
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    # Install linting tools
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort

    # Run various linting checks:
    # - flake8 for code style and errors
    # - black for code formatting
    # - isort for import sorting
    - name: Run linters
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        black . --check
        isort . --check-only --profile black

  # Job for security vulnerability scanning
  security:
    name: Security checks
    runs-on: ubuntu-latest
    steps:
    # Check out repository code
    - uses: actions/checkout@v3

    # Set up Python 3.11 environment for security checks
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    # Install security scanning tools
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    # Run security checks:
    # - bandit for code security issues
    # - safety for known vulnerabilities in dependencies
    - name: Run security checks
      run: |
        bandit -r . -c pyproject.toml
        safety check